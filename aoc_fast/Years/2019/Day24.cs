using System.Text;

namespace aoc_fast.Years._2019
{
    internal class Day24
    {
        public static string input { get; set; }
        private static readonly uint[] LEVEL =
        [
            0b0000000000000000000100010,
            0b0000000000000000001000101,
            0b0000000000000000010001010,
            0b0000000000000000100010100,
            0b0000000000000001000001000,
            0b0000000000000010001000001,
            0b0000000000000100010100010,
            0b0000000000001000101000100,
            0b0000000000010001010001000,
            0b0000000000100000100010000,
            0b0000000001000100000100000,
            0b0000000010001010001000000,
            0b0000000100010100010000000,
            0b0000001000101000100000000,
            0b0000010000010001000000000,
            0b0000100010000010000000000,
            0b0001000101000100000000000,
            0b0010001010001000000000000,
            0b0100010100010000000000000,
            0b1000001000100000000000000,
            0b0001000001000000000000000,
            0b0010100010000000000000000,
            0b0101000100000000000000000,
            0b1010001000000000000000000,
            0b0100010000000000000000000,
        ];

        private static readonly uint[] OUTER =
        [
            0b0000000000000100010000000,
            0b0000000000000000010000000,
            0b0000000000000000010000000,
            0b0000000000000000010000000,
            0b0000000000010000010000000,
            0b0000000000000100000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000010000000000000,
            0b0000000000000100000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000010000000000000,
            0b0000000000000100000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000010000000000000,
            0b0000000100000100000000000,
            0b0000000100000000000000000,
            0b0000000100000000000000000,
            0b0000000100000000000000000,
            0b0000000100010000000000000,
        ];
        private static readonly uint[] INNER = 
        [
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000011111,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000100001000010000100001,
            0b0000000000000000000000000,
            0b1000010000100001000010000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b1111100000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
            0b0000000000000000000000000,
        ];

        private static uint num;
        private static void Parse()
        {
            num = Encoding.ASCII.GetBytes(input).Reverse().Where(b => !char.IsWhiteSpace((char)b)).Aggregate(0u, (acc, b) => (acc << 1) | (uint)(b & 1));
        }
        public static uint PartOne()
        {
            Parse();
            var grid = num;
            var seen = new HashSet<uint>();

            while(seen.Add(grid))
            {
                var next = 0u;
                
                foreach(var (i, level) in LEVEL.Index())
                {
                    var mask = 1u << i;
                    var bug = grid & mask;
                    var adjacent = uint.PopCount(grid & level);
                    if(adjacent == 1 || (bug == 0 && adjacent == 2)) next |= mask;
                }
                grid = next;
            }
            return grid;
        }

        public static uint PartTwo()
        {
            var start = 200;
            var end = 203;
            var grid = new uint[403];
            var next = new uint[403];

            grid[201] = num;

            for(var _ = 0; _ < 200;  _++)
            {
                for(var i = start; i < end; i++)
                {
                    var outer = grid[i -1];
                    var level = grid[i];
                    var inner = grid[i + 1];

                    var acc = 0u;

                    var repeat = (uint other, uint[] maskArray, int[] indices) =>
                    {
                        foreach(var i in indices)
                        {
                            var mask = 1u << i;
                            var bug = level & mask;
                            var adjacent = uint.PopCount(level & LEVEL[i]) + uint.PopCount(other & maskArray[i]);
                            if(adjacent == 1 || ( bug == 0 && adjacent == 2)) acc |= mask;
                        }
                    };
                    repeat(outer, OUTER, [0,1,2,3,4,5,9,10,14,15,19,20,21,22,23,24]);
                    repeat(inner, INNER, [6, 7, 8, 11, 13, 16, 17, 18]);
                    next[i] = acc;
                }
                if (next[start] != 0) start--;
                if(next[end - 1] != 0) end++;

                (grid, next) = (next, grid);
            }
            return grid[start..end].Select(i => uint.PopCount(i)).Aggregate(0u, (acc, i) => acc + i);
        }
    }
}
